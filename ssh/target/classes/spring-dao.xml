<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">


    <context:property-placeholder location="classpath:jdbc.properties"/>


    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <!--数据库基本信息-->
        <property name="url" value="${jdbc.url}"/>
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="filters" value="mergeStat"/>
        <!--最大连接数-->
        <property name="maxActive" value="20"/>
        <!--初始化连接数量-->
        <property name="initialSize" value="1"/>
        <!--配置获取连接等待超时的时间-->
        <property name="maxWait" value="6000"/>
        <!--最小空闲连接数-->
        <property name="minIdle" value="10"/>
        <!--配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位毫秒-->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!--配置一个连接在连接池最小生存时间-->
        <!--Destory线程中如果检测到当前连接的最后活跃时间和当前时间的差值大于minEvictableIdleTimeMillis，则关闭当前连接-->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <!--用来检测连接是否的sql，要求是一个查询语句。在mysql中通常设置为SELECT 'X'-->
 <!--       <property name="validationQuery">
            <value>SELECT 'x'</value>
        </property>-->
        <!--申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery连接是否有效-->
        <property name="testWhileIdle" value="true"/>
        <!--申请连接时执行validationQuery检测连接是否有效 这个配置会降低性能-->
        <property name="testOnBorrow" value="false"/>
        <!--归还连接时执行validationQuery检测连接是否有效 这个配置会降低性能-->
        <property name="testOnReturn" value="false"/>
        <!--要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true-->
        <property name="maxOpenPreparedStatements" value="20"/>
        <!--对于建立连接超过removeAbandonedTimeout的连接强制关闭-->
        <property name="removeAbandoned" value="true"/>
        <!--指定连接建立多长就被强制关闭-->
        <property name="removeAbandonedTimeout" value="1800"/>
        <!--指定发生removeabandoned时，是否记录当前线程的堆栈信息到日志中-->
        <property name="logAbandoned" value="true"/>
    </bean>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mappingLocations" value="classpath:mapper/*.hbm.xml"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="current_session_context_class">thread</prop>
            </props>
        </property>
    </bean>

    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <!--注入数据库连接池-->
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

 <!--   <tx:annotation-driven transaction-manager="transactionManager"/>-->

    <tx:annotation-driven/>




    <context:component-scan base-package="com.study.dao"/>

 <!--   <bean id="adminDao" class="com.study.dao11.AdminDao"></bean>-->



    <!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">
         <tx:attributes>
             <tx:method name="get*" read-only="true"/>
             <tx:method name="*"></tx:method>
         </tx:attributes>
     </tx:advice>

     <aop:config>
         <aop:pointcut id="txPointcut" expression="execution(* com.study.dao11.*.*(..))"/>
         <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
     </aop:config>-->

    <!-- 配置基于注解的声明式事务
        默认使用注解来管理事务行为
    -->
    <!--action控制层-->


</beans>